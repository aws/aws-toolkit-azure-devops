{
    "manifestVersion": 1,
    "id": "aws-vsts-tools",
    "version": "1.1.8",
    "name": "AWS Toolkit for Azure DevOps",
    "scopes": ["vso.build", "vso.build_execute", "vso.release"],
    "description": "Tasks for Amazon S3, AWS Elastic Beanstalk, AWS CodeDeploy, AWS Lambda and AWS CloudFormation and more, and running commands in the AWS Tools for Windows PowerShell module and the AWS CLI.",
    "publisher": "unknown",
    "public": false,
    "icons": {
        "default": "images/logo.png"
    },
    "content": {
        "details": {
            "path": "README.md"
        },
        "license": {
            "path": "LICENSE"
        }
    },
    "targets": [
        {
            "id": "Microsoft.VisualStudio.Services"
        }
    ],
    "tags": [
        "AWS",
        "S3",
        "CloudFormation",
        "AWS CLI",
        "Lambda",
        "Serverless",
        "CodeDeploy",
        "Elastic Beanstalk",
        "SNS",
        "SQS",
        "AWSPowerShell",
        "Elastic Container Registry",
        "Systems Manager",
        "Secrets Manager"
    ],
    "links": {
        "getstarted": {
            "uri": "https://aws.amazon.com/vsts?referer=vsmarketplace"
        },
        "learn": {
            "uri": "https://aws.amazon.com/vsts?referer=vsmarketplace"
        },
        "license": {
            "uri": "https://github.com/aws/aws-vsts-tools/blob/master/LICENSE"
        },
        "support": {
            "uri": "https://github.com/aws/aws-vsts-tools/issues"
        }
    },
    "repository": {
        "type": "git",
        "uri": "https://github.com/aws/aws-vsts-tools"
    },
    "branding": {
        "color": "rgb(220, 235, 252)",
        "theme": "light"
    },
    "galleryFlags": [],
    "screenshots": [
        {
            "path": "images/screenshot.png"
        }
    ],
    "files": [
        {
            "path": "images",
            "addressable": true
        },
        {
            "path": "Tasks/AWSCLI"
        },
        {
            "path": "Tasks/AWSPowerShellModuleScript"
        },
        {
            "path": "Tasks/AWSShellScript"
        },
        {
            "path": "Tasks/BeanstalkCreateApplicationVersion"
        },
        {
            "path": "Tasks/BeanstalkDeployApplication"
        },
        {
            "path": "Tasks/CloudFormationCreateOrUpdateStack"
        },
        {
            "path": "Tasks/CloudFormationDeleteStack"
        },
        {
            "path": "Tasks/CloudFormationExecuteChangeSet"
        },
        {
            "path": "Tasks/CodeDeployDeployApplication"
        },
        {
            "path": "Tasks/ECRPullImage"
        },
        {
            "path": "Tasks/ECRPushImage"
        },
        {
            "path": "Tasks/LambdaDeployFunction"
        },
        {
            "path": "Tasks/LambdaInvokeFunction"
        },
        {
            "path": "Tasks/LambdaNETCoreDeploy"
        },
        {
            "path": "Tasks/S3Download"
        },
        {
            "path": "Tasks/S3Upload"
        },
        {
            "path": "Tasks/SecretsManagerCreateOrUpdateSecret"
        },
        {
            "path": "Tasks/SecretsManagerGetSecret"
        },
        {
            "path": "Tasks/SendMessage"
        },
        {
            "path": "Tasks/SystemsManagerGetParameter"
        },
        {
            "path": "Tasks/SystemsManagerRunCommand"
        },
        {
            "path": "Tasks/SystemsManagerSetParameter"
        }
    ],
    "categories": ["Azure Pipelines"],
    "contributions": [
        {
            "id": "aws-credentials",
            "description": "Credentials for tasks invoking AWS services",
            "type": "ms.vss-endpoint.service-endpoint-type",
            "targets": ["ms.vss-endpoint.endpoint-types"],
            "properties": {
                "name": "AWS",
                "displayName": "AWS",
                "url": {
                    "displayName": "Server Url",
                    "helpText": "AWS homepage.",
                    "value": "https://aws.amazon.com/",
                    "isVisible": "false"
                },
                "dataSources": [
                    {
                        "name": "AWS",
                        "endpointUrl": "{{endpoint.url}}api/projects/index",
                        "resultSelector": "jsonpath:$[*].nm"
                    }
                ],
                "authenticationSchemes": [
                    {
                        "type": "ms.vss-endpoint.endpoint-auth-scheme-basic",
                        "inputDescriptors": [
                            {
                                "id": "username",
                                "name": "Access Key ID",
                                "description": "The AWS access key ID for signing programmatic requests.\nExample: AKIAIOSFODNN7EXAMPLE",
                                "inputMode": "textbox",
                                "isConfidential": false,
                                "validation": {
                                    "isRequired": true,
                                    "dataType": "string"
                                }
                            },
                            {
                                "id": "password",
                                "name": "Secret Access Key",
                                "description": "The AWS secret access key for signing programmatic requests.\nExample: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
                                "inputMode": "passwordbox",
                                "isConfidential": true,
                                "validation": {
                                    "isRequired": true,
                                    "dataType": "string"
                                }
                            },
                            {
                                "id": "sessionToken",
                                "name": "Session Token",
                                "description": "The AWS session token for signing programmatic requests.\nNote: Only use this if you have an external rotation mechanism)",
                                "inputMode": "passwordbox",
                                "isConfidential": true,
                                "validation": {
                                    "isRequired": false,
                                    "dataType": "string"
                                }
                            },
                            {
                                "id": "assumeRoleArn",
                                "name": "Role to Assume",
                                "description": "The Amazon Resource Name (ARN) of the role to assume.\nIf a role ARN is specified the access and secret keys configured in the endpoint will be used to generate temporary session credentials, scoped to the specified role, and used be used by the task.\nThe generated credentials for each AWS task will be valid for a default duration of 15 minutes. If your tasks need a longer duration (up to a maximum of one hour) set the variable 'aws.rolecredential.maxduration' on your build or release definition to the required duration (in seconds, minimum 900 and maximum 3600). Note that this setting will affect all tasks that use AWS endpoints configured to assume a role.",
                                "inputMode": "textbox",
                                "isConfidential": false,
                                "validation": {
                                    "isRequired": false,
                                    "dataType": "string"
                                }
                            },
                            {
                                "id": "roleSessionName",
                                "name": "Role Session Name",
                                "description": "Optional identifier for the assumed role session. If not specified the tasks will use a default name of 'aws-vsts-tools'.\nUse the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. In cross-account scenarios, the role session name is visible to, and can be logged by the account that owns the role. The role session name is also used in the ARN of the assumed role principal. This means that subsequent cross-account API requests using the temporary security credentials will expose the role session name to the external account in their CloudTrail logs.",
                                "inputMode": "textbox",
                                "isConfidential": false,
                                "validation": {
                                    "isRequired": false,
                                    "dataType": "string"
                                }
                            },
                            {
                                "id": "externalId",
                                "name": "External ID",
                                "description": "A unique identifier that is used by third parties when assuming roles in their customers' accounts, aka cross-account role access.",
                                "inputMode": "textbox",
                                "isConfidential": false,
                                "validation": {
                                    "isRequired": false,
                                    "dataType": "string"
                                }
                            }
                        ]
                    }
                ],
                "helpMarkDown": "<a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html?icmpid=docs_iam_console\" target=\"_blank\"><b>Learn More</b></a>"
            }
        },
        {
            "id": "AWSCLI",
            "description": "Run an AWS CLI command against an AWS connection",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/AWSCLI"
            }
        },
        {
            "id": "AWSPowerShellModuleScript",
            "description": "Run a PowerShell script that uses cmdlets from the AWS Tools for Windows PowerShell module.",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/AWSPowerShellModuleScript"
            }
        },
        {
            "id": "AWSShellScript",
            "description": "Run a shell script using Bash with AWS credentials.",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/AWSShellScript"
            }
        },
        {
            "id": "BeanstalkCreateApplicationVersion",
            "description": "Create a new application version for later deployment to AWS Elastic Beanstalk",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/BeanstalkCreateApplicationVersion"
            }
        },
        {
            "id": "BeanstalkDeployApplication",
            "description": "Deploy an application to AWS Elastic Beanstalk",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/BeanstalkDeployApplication"
            }
        },
        {
            "id": "CloudFormationCreateOrUpdateStack",
            "description": "Create or update an AWS CloudFormation stack",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/CloudFormationCreateOrUpdateStack"
            }
        },
        {
            "id": "CloudFormationDeleteStack",
            "description": "Deletes an AWS CloudFormation stack",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/CloudFormationDeleteStack"
            }
        },
        {
            "id": "CloudFormationExecuteChangeSet",
            "description": "Executes an AWS CloudFormation change set",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/CloudFormationExecuteChangeSet"
            }
        },
        {
            "id": "CodeDeployDeployApplication",
            "description": "Deploy an application to Amazon EC2 instances using AWS CodeDeploy",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/CodeDeployDeployApplication"
            }
        },
        {
            "id": "ECRPullImage",
            "description": "Pull an Elastic Container Registry image",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/ECRPullImage"
            }
        },
        {
            "id": "ECRPushImage",
            "description": "Push a local Docker image to Elastic Container Registry",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/ECRPushImage"
            }
        },
        {
            "id": "LambdaDeployFunction",
            "description": "General purpose deployment for AWS Lambda functions",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/LambdaDeployFunction"
            }
        },
        {
            "id": "LambdaInvokeFunction",
            "description": "Invokes an AWS Lambda function with a JSON payload",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/LambdaInvokeFunction"
            }
        },
        {
            "id": "LambdaNETCoreDeploy",
            "description": "Build and deploy a .NET Core AWS Lambda function",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/LambdaNETCoreDeploy"
            }
        },
        {
            "id": "S3Download",
            "description": "Download files from an Amazon Simple Storage Service (S3) Bucket",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/S3Download"
            }
        },
        {
            "id": "S3Upload",
            "description": "Upload files to an Amazon Simple Storage Service (S3) Bucket",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/S3Upload"
            }
        },
        {
            "id": "SecretsManagerCreateOrUpdateSecret",
            "description": "Updates a secret, optionally creating a secret if it does not exist",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/SecretsManagerCreateOrUpdateSecret"
            }
        },
        {
            "id": "SecretsManagerGetSecret",
            "description": "Stores the value of a secret in AWS Secrets Manager into a secret build variable",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/SecretsManagerGetSecret"
            }
        },
        {
            "id": "SendMessage",
            "description": "Sends a message to an SNS topic or SQS queue",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/SendMessage"
            }
        },
        {
            "id": "SystemsManagerGetParameter",
            "description": "Read one or more Systems Manager Parameter Store values into build variables",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/SystemsManagerGetParameter"
            }
        },
        {
            "id": "SystemsManagerRunCommand",
            "description": "Run a command remotely on a fleet of EC2 instances and/or on-premise machines",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/SystemsManagerRunCommand"
            }
        },
        {
            "id": "SystemsManagerSetParameter",
            "description": "Creates or updates a parameter value in the Systems Manager Parameter Store.",
            "type": "ms.vss-distributed-task.task",
            "targets": ["ms.vss-distributed-task.tasks"],
            "properties": {
                "name": "Tasks/SystemsManagerSetParameter"
            }
        }
    ]
}
